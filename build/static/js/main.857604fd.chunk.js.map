{"version":3,"sources":["Utils/audio.js","Components/Key.js","constants.js","Components/Piano.js","App.js","serviceWorker.js","index.js"],"names":["Synth","Tone","toMaster","Key","_ref","note","isSharp","children","react_default","a","createElement","className","concat","onClick","e","triggerAttackRelease","stopPropagation","playNote","NOTE_ORDER","Piano","props","keys","notes","i","length","nextNote","indexOf","push","Components_Key","getKeys","startingNote","noteIndex","currentOctave","getNotes","App","Components_Piano","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIeA,GAFD,WAAIC,EAAKD,QAAQE,WCgBhBC,EARH,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,QAASC,EAAlBH,EAAkBG,SAAlB,OACVC,EAAAC,EAAAC,cAAA,OACEC,UAAS,GAAAC,OATW,YASX,KAAAA,OAAwBP,EAAxB,KAAAO,OAAgCN,EAAU,QAAU,IAC7DO,QAAS,SAACC,GAAD,OARI,SAACA,EAAGT,GACnBL,EAAMe,qBAAqBV,EAAM,MACjCS,EAAEE,kBAMgBC,CAASH,EAAGT,KAC3BE,ICdQW,EAAa,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KCyDxEC,EAXD,SAACC,GACb,IACMC,EAzBQ,SAACC,GAGf,IAFA,IAAMD,EAAO,GAEJE,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK,EAAG,CACxC,IAAMlB,EAAOiB,EAAMC,GACbE,EAAWH,EAAMC,EAAI,GACXE,GAAYA,EAASC,QAAQ,MAAQ,GAGnDL,EAAKM,KACHnB,EAAAC,EAAAC,cAACkB,EAAD,CAAUvB,KAAMA,EAAMC,SAAS,GAC7BE,EAAAC,EAAAC,cAACkB,EAAD,CAAUvB,KAAMoB,EAAUnB,SAAS,MAGvCiB,GAAK,GAELF,EAAKM,KAAKnB,EAAAC,EAAAC,cAACkB,EAAD,CAAUvB,KAAMA,EAAMC,SAAS,KAI7C,OAAOe,EAKMQ,CA5CE,SAACC,GAMhB,IALA,IAAIC,EAAYb,EAAWQ,QAAQI,GAC/BE,EAAgB,EAGdV,EAAQ,GACLC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACvBQ,EAAYb,EAAWM,SAAW,GAAmB,IAAdO,IACzCA,EAAY,EACZC,GAAiB,GAGnBV,EAAMK,KAAKT,EAAWa,GAAaC,GACnCD,GAAa,EAGf,OAAOT,EA2BOW,CAASb,EAAMU,eAG7B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZU,ICpCQa,mLATX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAK,iBACLF,EAAAC,EAAAC,cAACyB,EAAD,CAAOL,aAAa,cALVM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.857604fd.chunk.js","sourcesContent":["import Tone from 'tone';\n// Boot-up the synthesizer and export\nconst Synth = new Tone.Synth().toMaster();\n\nexport default Synth;\n","import React from 'react';\nimport Synth from '../Utils/audio';\n\nconst BASE_CLASS_NAME = 'piano-key';\n\nconst playNote = (e, note) => {\n  Synth.triggerAttackRelease(note, '8n');\n  e.stopPropagation();\n}\n\nconst Key = ({ note, isSharp, children }) => (\n  <div\n    className={`${BASE_CLASS_NAME} ${note} ${isSharp ? 'sharp' : ''}`}\n    onClick={(e) => playNote(e, note)}>\n    {children}\n  </div>\n);\n\nexport default Key;\n","export const NOTE_ORDER = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n","import React, { Component } from 'react';\nimport PianoKey from './Key';\nimport { NOTE_ORDER } from '../constants';\n\nconst getNotes = (startingNote) => {\n  let noteIndex = NOTE_ORDER.indexOf(startingNote);\n  let currentOctave = 4;\n\n  // Not configurable, 2 octaves\n  const notes = [];\n  for (let i = 0; i < 24; i += 1) {\n    if (noteIndex % NOTE_ORDER.length === 0 && noteIndex !== 0) {\n      noteIndex = 0;\n      currentOctave += 1;\n    }\n\n    notes.push(NOTE_ORDER[noteIndex] + currentOctave);\n    noteIndex += 1;\n  }\n\n  return notes;\n}\n\nconst getKeys = (notes) => {\n  const keys = [];\n\n  for (let i = 0; i < notes.length; i += 1) {\n    const note = notes[i];\n    const nextNote = notes[i + 1];\n    const isSharp = nextNote && nextNote.indexOf('#') > -1 ? 'sharp' : '';\n\n    if (isSharp) {\n      keys.push(\n        <PianoKey note={note} isSharp={false}>\n          <PianoKey note={nextNote} isSharp={true}/>\n        </PianoKey>\n      );\n      i += 1;\n    } else {\n      keys.push(<PianoKey note={note} isSharp={false}/>);\n    }\n  }\n\n  return keys;\n}\n\nconst Piano = (props) => {\n  const notes = getNotes(props.startingNote);\n  const keys = getKeys(notes);\n\n  return (\n    <div className='piano-wrapper'>\n      {keys}\n    </div>\n  );\n};\n\nexport default Piano;\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Piano from './Components/Piano';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{'Virtual Piano'}</h1>\n        <Piano startingNote=\"C\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}